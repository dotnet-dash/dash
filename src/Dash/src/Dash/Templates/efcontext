using Microsoft.EntityFrameworkCore;
{{-
    for e in entities
        if e.seed_data.size > 0
}}
using System.Collections.Generic;
{{-
            break
        end
    end
}}

#nullable enable
namespace {{ namespace }}
{
    public partial class {{ modelName }}DbContext : DbContext
    {
        public {{ modelName }}DbContext(DbContextOptions<{{ modelName }}DbContext> options) : base(options)
        {
        }

{{- for e in entities }}
        public DbSet<{{ e.name }}> {{ e.name | format_name pluralize }} => Set<{{ e.name }}>();
{{- end }}

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
{{- for e in entities }}
    {{- for p in e.code_attributes }}
            modelBuilder.Entity<{{ e.name }}>().Property(p => p.{{- p.name }})
        {{- if p.data_type.is_string }}.IsUnicode({{- p.data_type.is_unicode }}){{- end }}
        {{- if !p.is_nullable }}.IsRequired(){{- end }}
        {{- if p.max_length != null }}.HasMaxLength({{- p.max_length }}){{- end }}
        {{- if p.default_value }}.HasDefaultValue({{- p.default_value | get_csharp_literal }}){{- end }}
        {{- if true }};{{- end }}
    {{- end }}
    {{- if e.seed_data.size > 0 }}
            modelBuilder.Entity<{{ e.name }}>().HasData(new List<{{ e.name }}>
            {
        {{- for data in e.seed_data }}
                new {{ e.name }} { {{- for kvp in data }} {{ kvp.key }} = {{ kvp.value | get_csharp_literal }}{{- if !for.last}},{{- end }} {{- end }} }{{- if !for.last}},{{- end }}
        {{- end}}
            });
    {{- end }}
{{- end }}
        }
    }
}
#nullable restore