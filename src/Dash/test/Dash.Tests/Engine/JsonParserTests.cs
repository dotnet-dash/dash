using System.IO;
using Dash.Engine.JsonParser;
using FluentAssertions;
using Xunit;

namespace Dash.Tests.Engine
{
    public class JsonParserTests
    {
        private readonly JsonParser _sut;

        public JsonParserTests()
        {
            var dataTypeParser = new DataTypeParser();

            _sut = new JsonParser(dataTypeParser);
        }

        [Fact]
        public void Parse_EmptyJson_ShouldHaveParsedTree()
        {
            // Act
            var result = _sut.Parse("{}");

            // Assert
            result.EntityDeclarations.Count.Should().Be(0);
        }

        ///
        ////        [Fact]
        ////        public void Parse_Configuration()
        ////        {
        ////            // Act
        ////            var result = _sut.Parse(File.ReadAllText("Samples/Configuration.json"));

        ////            // Assert
        ////            result.Configuration.Should().NotBeNull();
        ////            result.Configuration.AutogenSuffix.Should().Be(".autogenerated");
        ////            result.Configuration.Header.Should().Be("(c) 2020 Dash");
        ////            result.Configuration.DefaultNamespace.Should().Be("MyApplication");
        ////            result.Configuration.Templates.Should().SatisfyRespectively(
        ////                first =>
        ////                {
        ////                    first.Template.Should().Be("./MyTemplate/EfContext");
        ////                    first.Output.Should().Be("./Ef");
        ////                },
        ////                second =>
        ////                {
        ////                    second.Template.Should().Be("./MyTemplates/Poco");
        ////                    second.Output.Should().Be("./Poco");
        ////                }
        ////            );
        ////        }

        [Fact]
        public void Parse_HelloWorldJson_ShouldHaveParsedTree()
        {
            // Act
            var result = _sut.Parse(File.ReadAllText("Samples/HelloWorld.json"));

            // Assert
            result.EntityDeclarations.Should().SatisfyRespectively(
                first =>
                {
                    first.Name.Should().Be("Account");
                    first.AttributeDeclarations.Should().SatisfyRespectively(
                        a =>
                        {
                            a.AttributeName.Should().Be("Id");
                            a.AttributeDataType.Should().Be("Int");
                        },
                        b =>
                        {
                            b.AttributeName.Should().Be("Email");
                            b.AttributeDataType.Should().Be("Email");
                        });
                });
        }

        [Fact]
        public void Parse_OverrideBaseIdJson_ShouldHaveParsedTree()
        {
            // Act
            var result = _sut.Parse(File.ReadAllText("Samples/OverrideBaseId.json"));

            // Assert
            result.EntityDeclarations.Should().SatisfyRespectively(
                first =>
                {
                    first.Name.Should().Be("Base");
                    first.AttributeDeclarations.Should().SatisfyRespectively(a =>
                    {
                        a.AttributeName.Should().Be("Id");
                        a.AttributeDataType.Should().Be("Guid");
                    });
                });
        }

        [Fact]
        public void Parse_Has_ShouldHaveParsedTree()
        {
            // Act
            var result = _sut.Parse(File.ReadAllText("Samples/Has.json"));

            // Assert
            result.EntityDeclarations.Should().SatisfyRespectively(
                first =>
                {
                    first.Name.Should().Be("Person");
                    first.SingleEntityReferences.Should().SatisfyRespectively(
                        a =>
                        {
                            a.Name.Should().Be("CountryOfBirth");
                            a.ReferencedEntity.Should().Be("Country");
                        },
                        b =>
                        {
                            b.Name.Should().Be("CountryOfResidence");
                            b.ReferencedEntity.Should().Be("Country");
                        });
                },
                second =>
                {
                    second.Name.Should().Be("Country");
                    second.CollectionEntityReferences.Should().BeEmpty();
                }
            );
        }

        [Fact]
        public void Parse_HasNullable_ShouldHaveParsedTree()
        {
            // Act
            var result = _sut.Parse(File.ReadAllText("Samples/HasNullable.json"));

            // Assert
            result.EntityDeclarations.Should().SatisfyRespectively(
                first =>
                {
                    first.Name.Should().Be("Person");
                    first.SingleEntityReferences.Should().SatisfyRespectively(
                        a =>
                        {
                            a.Name.Should().Be("MotherTongue");
                            a.ReferencedEntity.Should().Be("Language");
                        },
                        b =>
                        {
                            b.Name.Should().Be("PreferredLanguage");
                            b.ReferencedEntity.Should().Be("Language?");
                        });
                },
                second =>
                {
                    second.Name.Should().Be("Language");
                    second.CollectionEntityReferences.Should().BeEmpty();
                }
            );
        }

        [Fact]
        public void Parse_HasMany_ShouldHaveParsedTree()
        {
            // Act
            var result = _sut.Parse(File.ReadAllText("Samples/HasMany.json"));

            // Assert
            result.EntityDeclarations.Should().SatisfyRespectively(
                first =>
                {
                    first.Name.Should().Be("Order");
                    first.CollectionEntityReferences.Should().SatisfyRespectively(
                        a =>
                        {
                            a.Name.Should().Be("OrderLine");
                            a.ReferencedEntity.Should().Be("OrderLine");
                        });
                },
                second =>
                {
                    second.Name.Should().Be("OrderLine");
                    second.AttributeDeclarations.Should().SatisfyRespectively(
                        a =>
                        {
                            a.AttributeName.Should().Be("Description");
                            a.AttributeDataType.Should().Be("String");
                        });
                }
            );
        }

        [Fact]
        public void Parse_HasAndBelongsToManyJson_ShouldHaveParsedTree()
        {
            // Act
            var result = _sut.Parse(File.ReadAllText("Samples/HasAndBelongsToMany.json"));

            // Assert
            result.EntityDeclarations.Should().SatisfyRespectively(
                first =>
                {
                    first.Name.Should().Be("Order");
                    first.AttributeDeclarations.Should().BeEmpty();
                    first.SingleEntityReferences.Should().BeEmpty();
                    first.CollectionEntityReferences.Should().SatisfyRespectively(
                        a =>
                        {
                            a.Name.Should().Be("Product");
                            a.ReferencedEntity.Should().Be("Product");
                        });
                },
                second =>
                {
                    second.Name.Should().Be("Product");
                    second.AttributeDeclarations.Should().SatisfyRespectively(
                        a =>
                        {
                            a.AttributeName.Should().Be("Description");
                            a.AttributeDataType.Should().Be("String");
                        });
                    second.SingleEntityReferences.Should().BeEmpty();
                    second.CollectionEntityReferences.Should().BeEmpty();
                });
        }

        [Fact]
        public void Parse_Inheritance_ShouldHaveParsedTree()
        {
            // Act
            var result = _sut.Parse(File.ReadAllText("Samples/Inheritance.json"));

            // Assert
            //result.EntityDeclarations.
        }
    }
}